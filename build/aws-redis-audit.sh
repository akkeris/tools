#!/bin/bash

##====================================================================================
## DESCRIPTION: Script that finds orphaned Redis resources in AWS
## AUTHOR: Trevor Linton (@trevorlinton)
##====================================================================================

#
# ARG_OPTIONAL_SINGLE([context],[c],[Specify kubectl context],[current-context])
# ARG_HELP([Find a list of Redis resources in AWS that are not attached to either the database-broker or controller-api])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Color Functions 
red=$(eval "tput setaf 1") 
green=$(eval "tput setaf 2") 
yellow=$(eval "tput setaf 3") 
reset=$(eval "tput sgr0")


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ch'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_context="current-context"


print_help()
{
	printf '%s\n' "Find a list of Redis resources in AWS that are not attached to either the database-broker or controller-api"
	printf 'Usage: %s [-c|--context <arg>] [-h|--help]\n' "${0##*/}"
	printf '\t%s\n' "-c, --context: Specify kubectl context (default: 'current-context')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--context)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_context="$2"
				shift
				;;
			--context=*)
				_arg_context="${_key##--context=}"
				;;
			-c*)
				_arg_context="${_key##-c}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "
${red}âœ—${reset} Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


CLUSTER=$_arg_context

if [ "$CLUSTER" = "current-context" ]; then
  CLUSTER=`kubectl config current-context`
fi

aws elasticache describe-cache-clusters --max-items 200 > clusters.json
jq -r '.CacheClusters[] | select ( .Engine == "redis" ).CacheClusterId' clusters.json > redis-caches.txt
DEFINITIONS=`kubectl get deployments --all-namespaces -o yaml --context $CLUSTER`
ELASTICACHE_DATABASE=`kubectl get configmaps/elasticache-broker -o jsonpath='{.data.DATABASE_URL}' -n akkeris-system --context $CLUSTER`
CONTROLLER_API_DATABASE=`kubectl get configmaps/controller-api -o jsonpath='{.data.DATABASE_URL}' -n akkeris-system --context $CLUSTER`
rm not-found-in-cluster.txt
while read p; do
  OUT=`echo $DEFINITIONS | grep $p`
  if [ "$OUT" == "" ]; then
      echo "$p" >> not-found-in-cluster.txt
  fi
done <redis-caches.txt

rm not-found-in-elasticache-broker.txt >> /dev/null
rm found-in-elasticache-broker.txt
while read p; do
    SERVICE_ID=`echo "select id from resources where name='$p'" | psql $ELASTICACHE_DATABASE -A -q -t`
    if [ "$SERVICE_ID" == "" ]; then
        echo "$p" >> not-found-in-elasticache-broker.txt
    else
        echo "$SERVICE_ID" >> found-in-elasticache-broker.txt
    fi
done <not-found-in-cluster.txt

rm not-found-in-app-controller.txt
rm found-in-app-controller.txt
while read p; do
    IS_VALID=`echo "select apps.app from services join service_attachments on services.service = service_attachments.service join apps on service_attachments.app = apps.app where services.service = '$p' and services.deleted = false and service_attachments.deleted = false and apps.deleted = false" | psql $CONTROLLER_API_DATABASE -A -q -t`
    if [ "$IS_VALID" == "" ]; then
        echo "$p" >> not-found-in-app-controller.txt
    else
        echo "$p" >> found-in-app-controller.txt
    fi
done <found-in-elasticache-broker.txt

# ] <-- needed because of Argbash
