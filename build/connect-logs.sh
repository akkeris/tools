#!/bin/bash

##========================================================================================
## DESCRIPTION: Script to tail the logs from a kafka-connect server (or any other really)
## AUTHOR: Sam Beckett (@sbeck14)
##========================================================================================

#
# ARG_OPTIONAL_SINGLE([filepath],[f],[Path to the file to tail on the server],[/var/log/kafka/kafka-connect.out])
# ARG_OPTIONAL_SINGLE([sshkey],[i],[Path to the SSH key to use for authentication],[~/.ssh/ops.pem])
# ARG_OPTIONAL_SINGLE([lines],[n],[How many lines to tail],[10000])
# ARG_POSITIONAL_SINGLE([server],[Endpoint of the server to connect to])
# ARG_DEFAULTS_POS()
# ARG_HELP([connect-logs],[Fetch the latest logs for kafka connect])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Color Functions 
red=$(eval "tput setaf 1") 
green=$(eval "tput setaf 2") 
yellow=$(eval "tput setaf 3") 
reset=$(eval "tput sgr0")


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='finh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_server=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_filepath="/var/log/kafka/kafka-connect.out"
_arg_sshkey="~/.ssh/ops.pem"
_arg_lines="10000"


print_help()
{
	printf '%s\n' "connect-logs"
	printf 'Usage: %s [-f|--filepath <arg>] [-i|--sshkey <arg>] [-n|--lines <arg>] [-h|--help] <server>\n' "${0##*/}"
	printf '\t%s\n' "<server>: Endpoint of the server to connect to"
	printf '\t%s\n' "-f, --filepath: Path to the file to tail on the server (default: '/var/log/kafka/kafka-connect.out')"
	printf '\t%s\n' "-i, --sshkey: Path to the SSH key to use for authentication (default: '~/.ssh/ops.pem')"
	printf '\t%s\n' "-n, --lines: How many lines to tail (default: '10000')"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\n%s\n' "Fetch the latest logs for kafka connect"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-f|--filepath)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_filepath="$2"
				shift
				;;
			--filepath=*)
				_arg_filepath="${_key##--filepath=}"
				;;
			-f*)
				_arg_filepath="${_key##-f}"
				;;
			-i|--sshkey)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_sshkey="$2"
				shift
				;;
			--sshkey=*)
				_arg_sshkey="${_key##--sshkey=}"
				;;
			-i*)
				_arg_sshkey="${_key##-i}"
				;;
			-n|--lines)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_lines="$2"
				shift
				;;
			--lines=*)
				_arg_lines="${_key##--lines=}"
				;;
			-n*)
				_arg_lines="${_key##-n}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'server'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "
${red}✗${reset} Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "
${red}✗${reset} There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_server "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


ssh -i $_arg_sshkey ec2-user@$_arg_server "tail $_arg_filepath -n $_arg_lines"

# ] <-- needed because of Argbash
