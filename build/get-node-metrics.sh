#!/bin/bash

##====================================================================================
## DESCRIPTION: Script to get CPU and memory of all pods on a given Kubernetes node
## AUTHOR: Sam Beckett (@sbeck14)
##====================================================================================

#
# ARG_OPTIONAL_SINGLE([context],[c],[Specify kubectl context],[current-context])
# ARG_POSITIONAL_SINGLE([node],[Target node])
# ARG_DEFAULTS_POS()
# ARG_HELP([get-node-metrics],[Get CPU and memory of all pods on a given Kubernetes node])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Color Functions 
red=$(eval "tput setaf 1") 
green=$(eval "tput setaf 2") 
yellow=$(eval "tput setaf 3") 
reset=$(eval "tput sgr0")


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ch'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_node=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_context="current-context"


print_help()
{
	printf '%s\n' "get-node-metrics"
	printf 'Usage: %s [-c|--context <arg>] [-h|--help] <node>\n' "${0##*/}"
	printf '\t%s\n' "<node>: Target node"
	printf '\t%s\n' "-c, --context: Specify kubectl context (default: 'current-context')"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\n%s\n' "Get CPU and memory of all pods on a given Kubernetes node"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--context)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_context="$2"
				shift
				;;
			--context=*)
				_arg_context="${_key##--context=}"
				;;
			-c*)
				_arg_context="${_key##-c}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'node'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "
${red}✗${reset} Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "
${red}✗${reset} There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_node "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# Dependency checks
if ! command -v kubectl &> /dev/null
then
  echo "Required dependency kubectl not found"
  echo ""
  print_help
  exit 1
fi

if ! command -v jq &> /dev/null
then
  echo "Required dependency jq not found"
  echo ""
  print_help
  exit 1
fi

if ! command -v curl &> /dev/null
then
  echo "Required dependency curl not found"
  print_help
  exit 1
fi

ctx=$_arg_context
node=$_arg_node

if [ "$ctx" = "current-context" ]; then
  ctx=`kubectl config current-context`
fi

##============================================
## Main Functionality
##============================================

# Does node exist?
if ! kubectl get node $node >/dev/null 2>&1
then
  printf "$red"
  echo "Could not find node named $reset$node"
  echo ""
  print_help
  exit 1
fi

# Create connection to kube apiserver
kubectl --context $ctx proxy --port=8080 --append-server-path >/dev/null 2>&1 &
bg_pid=$!

sleep 2

curl http://localhost:8080/api/v1/nodes/$node/proxy/stats/summary 2>/dev/null | \
	jq '["Pod", "Namespace", "Memory(bytes)", "CPU(cores)"], (.pods[] | [.podRef.name, .podRef.namespace, (.memory.usageBytes/1000000 + 0.5 | floor |tostring + "MB"), (.cpu.usageNanoCores/1000000 + 0.5 | floor | tostring + "m")]) | @tsv' -r | \
	column -t | \
	(read -r; printf "%s\n" "$REPLY"; sort -k3 -nr)

# Kill kube proxy
kill $bg_pid

# ] <-- needed because of Argbash
