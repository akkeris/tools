#!/bin/bash

##====================================================================================
## DESCRIPTION: Find apps associated with a shared tenant database
## AUTHOR: Sam Beckett (@sbeck14)
##====================================================================================

#
# ARG_POSITIONAL_SINGLE([shared_tenant_database_name])
# ARG_OPTIONAL_SINGLE([context],[c],[Specify kubectl context],[current-context])
# ARG_OPTIONAL_SINGLE([database_context],[d],[Specify kubectl context for database cluster],[current-context])
# ARG_OPTIONAL_SINGLE([output],[o],[Output format (table or json)],[table])
# ARG_HELP([get-shared-tenant-apps],[Get a list of apps associated with a given shared tenant database])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Color Functions 
red=$(eval "tput setaf 1") 
green=$(eval "tput setaf 2") 
yellow=$(eval "tput setaf 3") 
reset=$(eval "tput sgr0")


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='cdoh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_context="current-context"
_arg_database_context="current-context"
_arg_output="table"


print_help()
{
	printf '%s\n' "get-shared-tenant-apps"
	printf 'Usage: %s [-c|--context <arg>] [-d|--database_context <arg>] [-o|--output <arg>] [-h|--help] <shared_tenant_database_name>\n' "${0##*/}"
	printf '\t%s\n' "-c, --context: Specify kubectl context (default: 'current-context')"
	printf '\t%s\n' "-d, --database_context: Specify kubectl context for database cluster (default: 'current-context')"
	printf '\t%s\n' "-o, --output: Output format (table or json) (default: 'table')"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\n%s\n' "Get a list of apps associated with a given shared tenant database"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--context)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_context="$2"
				shift
				;;
			--context=*)
				_arg_context="${_key##--context=}"
				;;
			-c*)
				_arg_context="${_key##-c}"
				;;
			-d|--database_context)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_database_context="$2"
				shift
				;;
			--database_context=*)
				_arg_database_context="${_key##--database_context=}"
				;;
			-d*)
				_arg_database_context="${_key##-d}"
				;;
			-o|--output)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output="$2"
				shift
				;;
			--output=*)
				_arg_output="${_key##--output=}"
				;;
			-o*)
				_arg_output="${_key##-o}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'shared_tenant_database_name'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "
${red}✗${reset} Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "
${red}✗${reset} There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_shared_tenant_database_name "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# Dependency check
if ! command -v jq &> /dev/null
then
  echo "Required dependency jq not found"
  print_help
  exit 1
fi

if ! command -v curl &> /dev/null
then
  echo "Required dependency curl not found"
  print_help
  exit 1
fi

if ! command -v psql &> /dev/null
then
  echo "Required dependency psql not found"
  print_help
  exit 1
fi


##============================================
## Main Functionality
##============================================

stname=$_arg_shared_tenant_database_name
ctx=$_arg_context
dbctx=$_arg_database_context
outputfmt=$_arg_output

if [ "$ctx" = "current-context" ]; then
  ctx=`kubectl config current-context`
fi

if [ "$dbctx" = "current-context" ]; then
  dbctx=`kubectl config current-context`
fi


# Get shared tenant DB url
stdb=`kubectl --context $dbctx get configmap -n akkeris-system database-broker -o json | jq ".data[] | select(test(\".*@${stname}[.].*\"))" -r`

if [ -z "$stdb" ]; then
 echo "${red}✗${reset} Connection URL for $stname not found!"
 exit 1
fi

# database-broker database URL
brokerdb=`kubectl --context $dbctx get configmap -n akkeris-system database-broker -o jsonpath='{.data.DATABASE_URL}'`

# controller-api database URL
controllerdb=`kubectl --context $ctx get configmap -n akkeris-system controller-api -o jsonpath='{.data.DATABASE_URL}'`

# Get list of databases in the shared tenant database
database_names=`psql $stdb -t -c "select array_to_json(array_agg(row_to_json(t))) from (select datname from pg_database where datistemplate = false) as t"`

if [ -z "$database_names" ]; then
  echo "${red}✗${reset} No databases were found on the shared tenant database server!"
  exit 1
fi

# Get database service IDs from the database-broker
joinednames=`echo $database_names | jq "[.[].datname] | join(\"' or name='\")" -r`
namesquery="name='$joinednames'"
names_and_ids=`psql ${brokerdb} -t -c  "
select
  array_to_json(array_agg(row_to_json(t)))
from (
  select
    name as dbname,
    id as dbid
  from databases
  where ${namesquery}
) as t"`

# Get app names from the controller-api
joinedids=`echo $names_and_ids | jq "[.[].dbid] | join(\"' or service_attachments.service='\")" -r`
idsquery="(service_attachments.service='$joinedids')"
appnames=`psql $controllerdb -t -c "
select
  array_to_json(array_agg(row_to_json(t)))
from (
  select
    service_attachments.service as dbid,
    concat(apps.name,'-',spaces.name) as appname
  from service_attachments
    join apps on apps.app = service_attachments.app
    join spaces on apps.space = spaces.space
  where
    service_attachments.deleted = false
    and apps.deleted = false
    and service_attachments.owned = true
    and ${idsquery}
) as t" | tr -d '[:space:]'`

# Combine the names, counts, service IDs, and app names
all_info=`jq -n --argjson a1 "$names_and_ids" --argjson a2 "$appnames" -s '[(\$a1 + \$a2 | group_by(.dbid)) | .[] | add] | [ sort_by(.count) | reverse[] ]'`

case $outputfmt in
  "json")
    echo $all_info | jq '.'
    ;;
  "table")
    echo $all_info | jq '(["Appname","Database","Addon_ID"] | (., map(length*"-"))), (. | sort_by(.appname) | .[] | [.appname // "--", .dbname, .dbid]) | @tsv' -r | column -t
    ;;
  *)
    echo "${red}✗${reset} Output format not recognized. Using json instead."
    echo $all_info | jq '.'
    ;;
esac

# ] <-- needed because of Argbash
